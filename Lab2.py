import csv

# Function to load train data from "trains.csv"
def load_train_data():
    trains = []
    with open("trains.csv", "r") as file:
        reader = csv.DictReader(file)
        #keys are taken from the first row (the header row) and values are the data from the respective row
        
        for row in reader:
            #extract the column Train ID and then assign it to key train_id ,We can append a new dictionary to the list of dictionaries by using the Python append() method
            
            trains.append({
                "train_id": row["Train ID"],
                "train_name": row["Train Name"],
                "source_station": row["Source Station"],
                "destination_station": row["Destination Station"],
                "total_seats": int(row["Total Seats"]),
                "available_seats": int(row["Available Seats"]),
                "fare_per_ticket": int(row["Total fare"])
            })
    return trains

# Function to load passenger data from "passengers.csv"
def load_passenger_data():
    passengers = []
    with open("passengers.csv", "r") as file:
        reader = csv.DictReader(file)
        for row in reader:
            # Directly use expected column names
            
            passengers.append({
                "passenger_name": row["Passenger Name"],
                "train_id": row["Train ID"],
                "tickets": int(row["Number of Tickets"])
            })
    return passengers

# Function to check seat availability and book tickets, check if seat is availability for passengers and books a tickes if possible
def check_and_book_tickets(trains, passenger):
    for train in trains:
        if train["train_id"] == passenger["train_id"]:  # Checks if the train ID in the current train matches the train ID in the passenger's booking.

            if train["available_seats"] >= passenger["tickets"]: #if the available seat is greater then passengers requested ticket 
                #if yes then
                train["available_seats"] -= passenger["tickets"]  #it will do changes in available tickes=available tickets-passenger booked tickets
                total_fare = train["fare_per_ticket"] * passenger["tickets"] #calculating the total cost=ticketcost*passenger's num of tickets book
                print("Booking confirmed for %s. Total fare: %d" % (passenger['passenger_name'], total_fare))    
                return total_fare
            else:
                print("Insufficient seats available for %s." % passenger['passenger_name'])  #if availableseat not greater than passengers tickets then
                return 0
    print("Train ID %s not found." % passenger['train_id'])
    return 0

# Function to generate train report
def generate_train_report(trains):
    print("Train Report:")
    for train in trains:
        print(f"Train ID: {train['train_id']}, Name: {train['train_name']}, "
              f"Source: {train['source_station']}, Destination: {train['destination_station']}, "
              f"Available Seats: {train['available_seats']}")
# Function to generate revenue report
def generate_revenue_report(trains, total_revenue):
    print("Revenue Report:")
    for train in trains:
        print(f"Train ID: {train['train_id']}, Name: {train['train_name']}, "
              f"Total Revenue: {total_revenue[train['train_id']]}")

# Main function
def main():
    trains = load_train_data()
    passengers = load_passenger_data()
    
    # Initialize total_revenue dictionary using a for loop
    total_revenue = {}  #this will track the total revenue generated by each train 
    for train in trains:   #etrates through each trsin in trains list
        train_id = train["train_id"]   #retrive the trin id 
        total_revenue[train_id] = 0   #initializa for this train total revenue as 0

    for passenger in passengers:
        fare = check_and_book_tickets(trains, passenger)   #this function return the total_fare if booking is successful 
        if fare > 0:    #so if fare greather than 0 then calculate the total revenue
            total_revenue[passenger["train_id"]] += fare  #Adds the fare to the total revenue for the corresponding train in the total_revenue

    generate_train_report(trains)   # this function to generate the report
    generate_revenue_report(trains, total_revenue)

# Execute the main function
if __name__ == "__main__":
    main()


